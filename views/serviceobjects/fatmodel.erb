<section id="fatmodel" class="slide">
  <h2> This is really bad.</h2>

  <script type="syntaxhighlighter" class="brush: ruby">

    class User < ActiveRecord::Base

      def charge(amount, token = nil)
        customer = stripe_customer

        if customer.sources.count == 0
           card = customer.sources.create(source: token)
        else
           card = customer.sources.first
        end

        transaction_result = Stripe::Charge.create(
                              amount:   amount, # in cents
                              currency: "usd",
                              customer: customer.id,
                              card:     card)
      end

      def stripe_customer
        if self.stripe_customer_id.present?
          customer = Stripe::Customer.retrieve(self.stripe_customer_id)
        else
          customer = Stripe::Customer.create(email: self.email)
          self.stripe_customer_id = customer.id
          self.save
        end
      end

    end

    class ChargesController < ApplicationController

      def create
        transaction_result = current_user.charge(params[:amount], params[:token])
        if transaction_result
          redirect_to orders_url, notice: "Your purchase has been successfull"
        else
          redirect_to user_billing_url, notice: "There was a problem with your payment"
      end

    end

  </script>

  <p>
    As our project will grow, model will get more and more responsibilities.
    Eventually, it will become a mess of different methods doing very different
    things.

    Such model is hard to test, change and has needless responsibilities.

    So, moving logic from controller to model doesn't help us much in a long term
    perspective.


    So, what can we do?
  </p>

</section>
